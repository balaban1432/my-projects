AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2 (ami-0aa7d40eeae50c9a9) EC2 Instances which host Python Flask Web Application. 
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from 
  ALBSecurityGroup, and allows tcp(3306) connections only within itself. RDS DB instance is placed 
  within WebServerSecurityGroup so that Database Server can communicate with Web Servers. 
  Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere. 
  WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed. 
  WebServerLT Launch Template is configured to prepare Python Flask environment on EC2, and to deploy 
  Phonebook Application on Flask Server after downloading the app code from Github repository.
  
Parameters:

  Subnets:
    Description: select at least two subnets
    Type: List<AWS::EC2::Subnet::Id>

  MyKey:
    Description: select your key-pem
    Type: AWS::EC2::KeyPair::KeyName

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

  VPC:
    Description: Select your VPC
    Type: AWS::EC2::VPC::Id

Resources:

  MyDatabaseServer:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: derya-db
      DBName: clarusway_phonebook
      DBSecurityGroups:
        - !Ref MyDBSecGrp
      Engine: MySQL
      EngineVersion: 8.0.28
      MasterUsername: admin
      MasterUserPassword: xxxxxxx
      Port: 3306
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref myDBSubnetGroup

  myDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - subnet-06ccd14fd83e3ee87
        - subnet-03cc89823f28f6264
        - subnet-056c99adf582bbf91
    Type: "AWS::RDS::DBSubnetGroup"

  MyAsgPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyASG # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: DeryaASG
      DesiredCapacity: 2
      HealthCheckGracePeriod: 200
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.DefaultVersionNumber
      MaxSize: 4 # Required
      MinSize: 2 # Required
      TargetGroupARNs:
        - !Ref MyTarget
      VPCZoneIdentifier: !Ref Subnets  

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref MyTarget
          Type: forward
      LoadBalancerArn: !Ref MyALB #required
      Port: 80 #required
      Protocol: HTTP #required

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4    
      Name: DeryaALB
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecGrp.GroupId
      Subnets: !Ref Subnets

  MyTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0aa7d40eeae50c9a9
        InstanceType: !Ref InstanceTypeParameter
        KeyName: !Ref MyKey
        SecurityGroupIds:
          - !GetAtt WebServerSecGrp.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="xxxxxxxxxxxxxxxxxxx"
                FOLDER="https://$TOKEN@raw.githubusercontent.com/balaban1432/private-my-projects/main/Project-004-Phonebook-Application"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"/templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"/templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"/templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/phonebook-app.py" -L "$FOLDER"/phonebook-app.py
                python3 /home/ec2-user/phonebook-app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address          

  MyDBSecGrp:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - EC2SecurityGroupId: !GetAtt WebServerSecGrp.GroupId
      EC2VpcId: !Ref VPC
      GroupDescription: Back-end Database # Required

  ALBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Http # Required
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServerSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecGrp.GroupId
      VpcId: !Ref VPC

Outputs:
  WebsiteURL:
    Value: !Sub
      - http://${ALBAddress}
      - ALBAddress: !GetAtt MyALB.DNSName
    Description: Phonebook Application Load Balancer URL
